@page "/ingredients"
@inject IIngredientRepository ingredientRepository
<h3>Ingredients list</h3>

@*<IngredientEditForm Ingredient="Ingredient" OnValidSubmit="ValidSubmit" ButtonText="@text" />*@

<EditForm Model="IngredientDto" OnValidSubmit="ValidSubmit">
    <div class="form-group row">
        <label for="name">Name</label>
        <div>
            <InputText class="form-control" id="name" @bind-Value="IngredientDto.Name" />
        </div>
    </div>
    <div class="form-group row">
        <label for="name">Name</label>
        <div>
            <InputNumber class="form-control" id="name" @bind-Value="IngredientDto.Kcal" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">@ButtonText</button>
    <button class="btn btn-danger" @onclick="Clear">Clear</button>
</EditForm>

<br />
<br />

<div class="container col-12">
    <div class="row col-6">
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Kcal</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (ListOfIngredients.Any())
                {
                    @foreach (var ingredient in ListOfIngredients)
                    {
                        <tr>
                            <td>@ingredient.Name</td>
                            <td>@ingredient.Kcal</td>
                            <td>
                                <button class="btn btn-primary" @onclick="@(()=>EditIngredient(ingredient))">Edit</button>
                                |
                                <button class="btn btn-danger" @onclick="@(()=>Delete(ingredient.Id))">Delete</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    public IngredientDto IngredientDto { get; set; } = new IngredientDto();
    public List<IngredientDto> ListOfIngredients { get; set; } = new List<IngredientDto>();
    public bool IsEdit { get; set; } = false;
    //private string text = "Save";
    private string ButtonText = "Save";

    protected override async Task OnInitializedAsync()
    {
        await LoadList();
    }

    private async Task Delete(int id)
    {
        await ingredientRepository.DeleteIngredient(id);
        await LoadList();
    }

    private void Clear()
    {
        IngredientDto = new IngredientDto();
    }

    private void EditIngredient(IngredientDto ingredient)
    {
        IngredientDto = ingredient;
        //IsEdit = true;
        //text = "Edit";
    }

    private async Task LoadList()
    {
        ListOfIngredients = await ingredientRepository.GetListOfIngredients();
    }

    private async Task ValidSubmit()
    {
        //if (!IsEdit)
        //{
        //    Console.WriteLine("Create");
        //    await ingredientRepository.CreateIngredient(Ingredient);
        //}
        //else
        //{
        //    Console.WriteLine("Update");
        //    await ingredientRepository.UpdateIngredient(Ingredient);
        //}

        //text = "Save";
        //IsEdit = false;

        await ingredientRepository.CreateIngredient(IngredientDto);

        IngredientDto = new IngredientDto();
        await LoadList();

    }
}
